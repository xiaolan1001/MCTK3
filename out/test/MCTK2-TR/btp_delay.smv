AGENT Sender(envACT, recACT)
ACTION : {sb0,sb1,none};
VAR
  bit : {0,1};
  ack : boolean;
  tick: 0..5;
INIT !ack;
--Sender's protocol
PROTOCOL
    (bit=0 & !ack) : (ACT=sb0);
    (bit=1 & !ack) : (ACT=sb1);
    ack : (ACT=none);
END
--Sender's evolution function
ASSIGN
  next(ack) := case
    (!ack & recACT=sack & (envACT=SR | envACT=rec)) : TRUE;
    TRUE : ack;
  esac;
  --init(bit) := 0;
  next(bit) := case
    (bit=0 & tick=0) : 1;
    (bit=1 & tick=0) : 0;
    TRUE : bit;
  esac;
  init(tick) := 5;
  next(tick) := case
    tick >0 : tick - 1;
    tick =0 : 5;
    TRUE : tick;
  esac;

AGENT Receiver(envACT, sndACT)
ACTION : {none, sack};
VAR
  state : {empty, r0, r1};
INIT state=empty;
--Receiver's protocol
PROTOCOL
    (state=empty) : (ACT=none);
    (state=r0 | state=r1) : (ACT=sack);
END
--Receiver's evolution function
ASSIGN
  next(state) := case
    (sndACT=sb0 & state=empty & (envACT=SR | envACT=snd)) : r0;
    (sndACT=sb1 & state=empty & (envACT=SR | envACT=snd)) : r1;
    TRUE : state;
  esac;

AGENT main
ACTION : {snd, rec, SR, none};
VAR
  s : Sender(ACT, r.ACT);
  r : Receiver(ACT, s.ACT);

RTCTL*SPEC (A G (s.bit)) | (A G (s.bit -> A F r.state=r1));