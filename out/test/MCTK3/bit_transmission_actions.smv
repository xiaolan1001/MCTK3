AGENT main
ACTION : {snd, rec, SR, none};

INVISIBLEVAR
    s : Sender;
    r : Receiver;

--PROTOCOL
--  TRUE: {snd, none};
--END

--SPECIFICATIONS
--      SPEC AG((r.state=r0 | r.state=r1) -> AF s.ack);
--      SPEC EF(EG((r.state=r0 | r.state=r1) & !s.ack));
--      SPEC AF(s.ack -> (s KNOW (r.state=r0 | r.state=r1)));
--      SPEC !E[TRUE BU 10..15 ((s.bit=1 & s.ack) -> (s KNOW (r.state=r0)))];
--      SPEC !EBG 10..15 ((s.bit=1 & s.ack) -> (s SKNOW (r.state=r0)));
--      SPEC ABG 10..15 (s SKNOW (r.state=r0));
--      SPEC AG((s.bit=1 & s.ack) -> (s KNOW (r.state=r0)));
--SPEC AF((r KNOW r.state=r0) | (r KNOW r.state=r1));
--END

--JUSTICE ACT=SR;


AGENT Sender
VAR
    bit : {0,1};
    ack : boolean;

ACTION : {sb0,sb1,none};

INIT !ack;

--Sender's protocol
PROTOCOL
	(bit=0 & !ack) : sb0;
	(bit=1 & !ack) : sb1;
	ack : none;
END

--Sender's evolution function
ASSIGN
next(ack) := case
   (!ack & r.ACT=sendack & (main.ACT=SR | main.ACT=rec)) : TRUE;
   1 : ack;   
esac;


AGENT Receiver
VAR
   state : {empty, r0, r1};

ACTION : {none, sendack};

INIT state=empty;

--Receiver's protocol
PROTOCOL 
	(state=empty) : none;
	(state=r0 | state=r1) : sendack;
END

--Receiver's evolution function
ASSIGN
next(state) := case
   (s.ACT=sb0 & state=empty & (main.ACT=SR | main.ACT=snd)) : r0;
   (s.ACT=sb1 & state=empty & (main.ACT=SR | main.ACT=snd)) : r1;
   1 : state;
esac;


